/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Service as PrismaService,
  Booking as PrismaBooking,
  Rating as PrismaRating,
} from "@prisma/client";

import { LocalStorageService } from "src/storage/providers/local/local.storage.service";
import { InputJsonValue } from "src/types";
import { FileDownload, FileUpload } from "src/storage/base/storage.types";
import { LocalStorageFile } from "src/storage/providers/local/local.storage.types";

export class ServiceServiceBase {
  constructor(
    protected readonly prisma: PrismaService,
    protected readonly localStorageService: LocalStorageService
  ) {}

  async count(args: Omit<Prisma.ServiceCountArgs, "select">): Promise<number> {
    return this.prisma.service.count(args);
  }

  async services(args: Prisma.ServiceFindManyArgs): Promise<PrismaService[]> {
    return this.prisma.service.findMany(args);
  }
  async service(
    args: Prisma.ServiceFindUniqueArgs
  ): Promise<PrismaService | null> {
    return this.prisma.service.findUnique(args);
  }
  async createService(args: Prisma.ServiceCreateArgs): Promise<PrismaService> {
    return this.prisma.service.create(args);
  }
  async updateService(args: Prisma.ServiceUpdateArgs): Promise<PrismaService> {
    return this.prisma.service.update(args);
  }
  async deleteService(args: Prisma.ServiceDeleteArgs): Promise<PrismaService> {
    return this.prisma.service.delete(args);
  }

  async uploadImage<T extends Prisma.ServiceFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.ServiceFindUniqueArgs>,
    file: FileUpload
  ): Promise<PrismaService> {
    file.filename = `profilePicture-${args.where.id}.${file.filename
      .split(".")
      .pop()}`;
    const containerPath = "image";
    const image = await this.localStorageService.uploadFile(
      file,
      [],
      1000000,
      containerPath
    );

    return await this.prisma.service.update({
      where: args.where,

      data: {
        image: image as InputJsonValue,
      },
    });
  }

  async downloadImage<T extends Prisma.ServiceFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.ServiceFindUniqueArgs>
  ): Promise<FileDownload> {
    const { image } = await this.prisma.service.findUniqueOrThrow({
      where: args.where,
    });

    return await this.localStorageService.downloadFile(
      image as unknown as LocalStorageFile
    );
  }

  async deleteImage<T extends Prisma.ServiceFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.ServiceFindUniqueArgs>
  ): Promise<PrismaService> {
    const { image } = await this.prisma.service.findUniqueOrThrow({
      where: args.where,
    });

    await this.localStorageService.deleteFile(
      image as unknown as LocalStorageFile
    );

    return await this.prisma.service.update({
      where: args.where,

      data: {
        image: Prisma.DbNull,
      },
    });
  }

  async findBookings(
    parentId: string,
    args: Prisma.BookingFindManyArgs
  ): Promise<PrismaBooking[]> {
    return this.prisma.service
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .bookings(args);
  }

  async findRatings(
    parentId: string,
    args: Prisma.RatingFindManyArgs
  ): Promise<PrismaRating[]> {
    return this.prisma.service
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .ratings(args);
  }
}
